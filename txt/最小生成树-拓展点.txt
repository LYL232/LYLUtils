农民约翰被选为他们镇的镇长！他其中一个竞选承诺就是在镇上建立起互联网，并连接到所有的农场。当然，他需要你的帮助。 约翰已经给他的农场安排了一条高速的网络线路，他想把这条线路共享给其他农场。为了使花费最少，他想铺设最短的光纤去连接所有的农场。 你将得到一份各农场之间连接费用的列表，你必须找出能连接所有农场并所用光纤最短的方案。 每两个农场间的距离不会超过100000

输入描述 Input Description
第一行： 农场的个数，N（3<=N<=100）。

第二行..结尾: 接下来的行包含了一个N*N的矩阵,表示每个农场之间的距离。理论上，他们是N行，每行由N个用空格分隔的数组成，实际上，他们每行限制在80个字符以内，因此，某些行会紧接着另一些行。当然，对角线将会是0，因为线路从第i个农场到它本身的距离在本题中没有意义。

输出描述 Output Description
只有一个输出，是连接到每个农场的光纤的最小长度和。

样例输入 Sample Input
4

0  4  9 21

4  0  8 17

9  8  0 16

21 17 16  0

样例输出 Sample Output
28
#include <bits/stdc++.h>
using namespace std;
const int maxn=1e2+10;
int cost[maxn][maxn];
int n,fv[maxn];
struct edge
{
    int from,to,cost;
    edge(int f,int t,int c):from(f),to(t),cost(c){};
    edge(const edge&e):from(e.from),to(e.to),cost(e.cost){};
    friend bool operator <(const edge&e1,const edge&e2);
};
bool operator <(const edge&e1,const edge&e2)
{
    return e1.cost>e2.cost;
}
int vfind(int x)
{
    return fv[x]==x?x:fv[x]=vfind(fv[x]);
}
void uni(int x,int y)
{
    fv[vfind(x)]=fv[y];
}
vector<edge> v[maxn];
int main()
{
    scanf("%d",&n);
    priority_queue<edge> pq;
    for(int i=1;i<=n;i++)
    {
        fv[i]=i;
        for(int j=1;j<=n;j++)
        {
            scanf("%d",&cost[i][j]);
            if(i<j)
            {
                v[i].push_back(edge(i,j,cost[i][j]));
                v[j].push_back(edge(j,i,cost[i][j]));
            }
        }
    }
    for(int i=0;i<v[1].size();i++)
        pq.push(v[1][i]);
    int ans=0,tot=1;
    while(pq.size())
    {
        edge en=pq.top();
        pq.pop();
        if(vfind(en.from)!=vfind(en.to))
        {
            //printf("加入%d->%d边权%d\n",en.from,en.to,en.cost);
            uni(en.to,en.from);
            ans+=en.cost;
            for(int i=0;i<v[en.to].size();i++)
                pq.push(v[en.to][i]);
            tot++;
            if(tot>=n)
                break;
        }
    }
    printf("%d\n",ans);
    return 0;
}
