#include<bits/stdc++.h>
using namespace std;
const int MAXN=2e5+5,MAXNLOGN=MAXN<<5;
int n,m,q,len,cnt=0,
a[MAXN],b[MAXN],root[MAXN];
struct NODE
{
    int l,r,sum;
}tree[MAXNLOGN];
void update(int tr,int&now,int l,int r,int x)
{
    now=++cnt;
    tree[now]=tree[tr];
    tree[now].sum++;
    if(l>=r)return;
    int mid=(l+r)>>1;
    if(x<=mid)update(tree[tr].l,tree[now].l,l,mid,x);
    else update(tree[tr].r,tree[now].r,mid+1,r,x);
}
int query(int trl,int trr,int l,int r,int k)
{
    if(l>=r)return l;
    int mid=(l+r)>>1,sum=tree[tree[trr].l].sum-tree[tree[trl].l].sum;
    if(k<=sum)return query(tree[trl].l,tree[trr].l,l,mid,k);
    return query(tree[trl].r,tree[trr].r,mid+1,r,k-sum);
}
int main()
{
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;++i)
    {
        scanf("%d",a+i);
        b[i]=a[i];
    }
    sort(b+1,b+n+1);
    len=unique(b+1,b+n+1)-b-1;
    for(int i=1;i<=n;++i)
		update(root[i-1],root[i],1,n,lower_bound(b+1,b+1+len,a[i])-b);
    for(int i=1;i<=m;++i)
    {
        int l,r,k;
        scanf("%d%d%d",&l,&r,&k);
        printf("%d\n",b[query(root[l-1],root[r],1,n,k)]);
    }
    return 0;
}
