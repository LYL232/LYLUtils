题目描述
如题，给出一个无向图，求出最小生成树，如果该图不连通，则输出orz

输入输出格式
输入格式：
第一行包含两个整数N、M，表示该图共有N个结点和M条无向边。（N<=5000，M<=200000）

接下来M行每行包含三个整数Xi、Yi、Zi，表示有一条长度为Zi的无向边连接结点Xi、Yi

输出格式：
输出包含一个数，即最小生成树的各边的长度之和；如果该图不连通则输出orz

输入输出样例
输入样例#1： 
4 5
1 2 2
1 3 2
1 4 3
2 3 4
3 4 3
输出样例#1： 
7

#include <bits/stdc++.h>
using namespace std;
const int MAXN=5e3+10,MAXM=4e5+10,MAXINT=1e9;
int n,m,x,y,z,tot=0,head[MAXN],dis[MAXN];
struct EDGE
{
    int to,cost,next;
}edge[MAXM];
struct CMPNODE
{
    int id,v;
    bool operator <(const CMPNODE&c)const
    {
        return v>c.v;
    }
};
inline void add_edge(int x,int y,int z)
{
    edge[++tot].next=head[x];
    edge[tot].to=y;
    edge[tot].cost=z;
    head[x]=tot;
}
int main()
{
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;i++)
    {
        dis[i]=MAXINT;
        head[i]=0;
    }
    for(int i=0;i<m;++i)
    {
        scanf("%d%d%d",&x,&y,&z);
        add_edge(x,y,z);
        add_edge(y,x,z);
    }
    priority_queue<CMPNODE> pq;
    pq.push((CMPNODE){1,0});
    tot=0;
    long long ans=0;
    while(pq.size())
    {
        int id=pq.top().id,cost=pq.top().v;pq.pop();
        if(!dis[id])continue;
        //printf("vis[%d]\n",id);
        dis[id]=0;
        ans+=cost;
        if(++tot>=n)break;
        for(int i=head[id];i;i=edge[i].next)
        {
            int to=edge[i].to;
            //printf("edgeTo[%d]=%d,dis[%d]=%d\n",to,edge[i].cost,to,dis[to]);
            if(edge[i].cost<dis[to])
            {
                dis[to]=edge[i].cost;
                pq.push((CMPNODE){to,dis[to]});
            }
        }
    }
    if(tot>=n)printf("%lld\n",ans);
    else printf("orz\n");
    return 0;
}
