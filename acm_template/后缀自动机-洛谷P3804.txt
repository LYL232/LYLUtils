题目描述
给定一个只包含小写字母的字符串SS,

请你求出 SS 的所有出现次数不为 11 的子串的出现次数乘上该子串长度的最大值。

输入输出格式
输入格式：
一行一个仅包含小写字母的字符串SS
输出格式：
一个整数，为 所求答案

输入输出样例
输入样例#1： 
abab
输出样例#1： 
4



#include<bits/stdc++.h>
using namespace std;
const int MAXN=1e6+10;//文本串长度
char s[MAXN<<1];
int topSorted[MAXN<<1],edgeIn[MAXN<<1];
struct SAM
{
    int last,cnt,child[MAXN<<2][26],fa[MAXN<<2],leng[MAXN<<2],times[MAXN<<2];
    SAM():last(1),cnt(1)
    {
        memset(child,0,sizeof(int)*MAXN*4*26);
        memset(fa,0,sizeof(int)*MAXN*4);
        memset(leng,0,sizeof(int)*MAXN*4);
        memset(times,0,sizeof(int)*MAXN*4);
    }
    void add(int c)
    {
        int p=last,newp=++cnt;
        last=newp;
        leng[newp]=leng[p]+1;
        for(;p&&!child[p][c];p=fa[p])child[p][c]=newp;
        if(!p)fa[newp]=1;
        else
        {
            int q=child[p][c];
            if(leng[p]+1==leng[q])fa[newp]=q;
            else
            {
                int extrp=++cnt;leng[extrp]=leng[p]+1;
                memcpy(child[extrp],child[q],sizeof(child[q]));
                fa[extrp]=fa[q];fa[q]=fa[newp]=extrp;
                for(;child[p][c]==q;p=fa[p])child[p][c]=extrp;
            }
        }
        times[newp]=1;//子串结尾
    }
}sam;
int main()
{
    memset(edgeIn,0,sizeof(int)*MAXN<<1);
    scanf("%s",s);
    int l=strlen(s),cnt,temp;
    //build
    for(int i=0;i<l;++i)sam.add(s[i]-'a');
    cnt=temp=sam.cnt;
    //topsort
    queue<int> q;
    for(int i=1;i<=cnt;++i)++edgeIn[sam.fa[i]];
    for(int i=1;i<=cnt;++i)if(!edgeIn[i])q.push(i);
    while(q.size())
    {
        int now=q.front();q.pop();
        topSorted[temp--]=now;
        if(!temp)break;
        if(!(--edgeIn[sam.fa[now]]))q.push(sam.fa[now]);
    }
    //solve
    long long ans=0;
    for(int i=cnt;i;i--)
    {
        int p=topSorted[i];
        sam.times[sam.fa[p]]+=sam.times[p];
        if(sam.times[p]>1)ans=max(ans,1LL*sam.times[p]*sam.leng[p]);
    }
    printf("%lld\n",ans);
    return 0;
}
